\documentclass[12pt]{article}

% Packages for math and symbols
\usepackage{amsmath, amssymb, amsfonts}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage{hyperref}
\usepackage{fancyhdr}
\usepackage{setspace}
\usepackage{parskip}
\usepackage{enumitem}

% Packages for code listings and pseudocode
\usepackage{listings}
\usepackage{color}
\usepackage{courier}
\usepackage{algorithm}
\usepackage{algpseudocode}

% Page layout settings
\geometry{letterpaper, margin=1in}

% Setup for code listings (for MATLAB code or pseudocode blocks)
\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
\lstset{
  backgroundcolor=\color{white},
  basicstyle=\footnotesize\ttfamily,
  breaklines=true,
  captionpos=b,
  commentstyle=\color{mygreen},
  keywordstyle=\color{blue},
  stringstyle=\color{mymauve},
  numbers=left,
  numberstyle=\tiny\color{mygray},
  frame=single,
  rulecolor=\color{black},
  tabsize=2,
  showstringspaces=false,
  breakatwhitespace=false,
}

% Title setup for a front page
\title{}
\author{}
\date{}

\begin{document}

% ---------------- FRONT PAGE ----------------
\begin{titlepage}
    \centering
    \vspace*{2cm}
    {\Huge\bfseries Numerical Simulation of a Freely Falling Rectangular Plastic Sheet \par}
    \vspace{0.6cm}
    {\Large\bfseries Mechanical Operations [CB2201] \par}
    \vspace{8cm}
    {\LARGE\itshape Contributors:\par}
    \vspace{0.6cm}
    {\Large
        Aryan Sambare (2301CB08) \par
        Krunal Baraskar (2301CB21)\par
        Tushar Shrivastav (2301CB44)\par
        Parth Ganjewar (2301CB48)\par
    }
    \vfill
    {\large Submission Date: [16 April 2025] \par}
\end{titlepage}

% ---------------- TOC PAGE ----------------
\newpage
\pagenumbering{roman}
\tableofcontents
\newpage


\section{Introduction}
The primary goal of this project is to simulate the falling dynamics of a thin plastic sheet using MATLAB. The simulation accounts for both translational and rotational motions under the influence of various aerodynamic and gravitational forces. This modeling is important in fields such as fluid dynamics, aerospace engineering, and the study of chaotic systems.

\section{Theoretical Background}

\subsection{Forces Acting on the Plastic Sheet}

The following forces are considered in the simulation:

\paragraph{Gravity:}  
Gravity exerts a downward force given by
\[
\mathbf{F}_g = -m\, g\, \hat{k},
\]
where \( m \) is the mass, \( g \) is gravitational acceleration, and \( \hat{k} \) is the unit vector in the vertical direction.

\paragraph{Buoyancy:}  
The buoyancy force, due to the displaced air, is given by
\[
\mathbf{F}_b = \rho_{\text{air}}\, V\, g\, \hat{k},
\]
with \(\rho_{\text{air}}\) as air density and \( V \) the plastic sheet’s volume.

\paragraph{Aerodynamic Drag:}  
Drag force opposes the relative motion of the plastic sheet with respect to the airflow:
\[
\mathbf{F}_d = -\frac{1}{2}\, \rho_{\text{air}}\, C_d\, A_{\text{proj}}\, |\mathbf{v}_{\text{rel}}|\, \mathbf{v}_{\text{rel}},
\]
where \(C_d\) is the drag coefficient, \(A_{\text{proj}}\) is the effective projected area, and \(\mathbf{v}_{\text{rel}}\) is the relative velocity between the plastic sheet and the wind.

\paragraph{Lift:}  
The lift force acts perpendicular to the relative wind direction:
\[
\mathbf{F}_l = \frac{1}{2}\, \rho_{\text{air}}\, C_l\, A_{\text{proj}}\, |\mathbf{v}_{\text{rel}}|^2\, \hat{l},
\]
where \(C_l\) is the lift coefficient and \(\hat{l}\) is the unit vector in the lift direction. The vector \(\hat{l}\) is typically computed based on the cross products involving the sheet's normal vector.

\subsection{Rotational Dynamics}
Rotational motion is captured via Euler angles (yaw, pitch, and roll). For a rectangular sheet, the moment of inertia is approximated by:
\[
I_{xx} = \frac{1}{12}\, m\,(h^2 + t^2), \quad I_{yy} = \frac{1}{12}\, m\,(w^2 + t^2), \quad I_{zz} = \frac{1}{12}\, m\,(w^2 + h^2),
\]
where \(w\), \(h\), and \(t\) denote the width, height, and thickness, respectively.

The angular acceleration is derived from:
\[
\boldsymbol{\alpha} = \mathbf{I}^{-1}\Big(\boldsymbol{\tau} - \boldsymbol{\omega}\times (\mathbf{I}\boldsymbol{\omega})\Big),
\]
with the torque generated by the lift force:
\[
\boldsymbol{\tau} = \mathbf{r}_{\text{lift}} \times \mathbf{F}_l.
\]
\subsection{Net Force Equation}

The net force acting on the falling sheet is the vector sum of all individual forces:

\[
\mathbf{F}_{\text{net}} = \mathbf{F}_g - \mathbf{F}_d + \mathbf{F}_l + \mathbf{F}_b
\]

Expanding each term, we obtain:

\[
\boxed{%
  \vect{F} = m\,\vect{g}
    - \tfrac12\,\rho\,C_d\,A_{\mathrm{proj}}\,\lvert \vect{v}\rvert\,\vect{v}
    + \tfrac12\,\rho\,C_l\,A_{\mathrm{lift}}\,\lvert \vect{v}\rvert^2\,\hat{n}
    - \rho\,V\,g\,\hat{z}
}
\]

\noindent\textbf{Where:}
\begin{itemize}
    \item $\mathbf{F}$ : Net Force acting on the sheet (N)
    \item $m$ : Mass of the sheet = 0.02 kg
    \item $\mathbf{g}$ : Gravitational acceleration vector, magnitude $g = 9.81\, \text{m/s}^2$
    \item $\rho$ : Air density = 1.225 kg/m$^3$
    \item $C_d$ : Drag coefficient = 1.28
    \item $A_{\text{proj}}$ : Projected area (depends on orientation relative to airflow)
    \item $\mathbf{v}$ : Velocity vector of the sheet
    \item $C_l$ : Lift coefficient = 0.8
    \item $A_{\text{lift}}$ : Effective area contributing to lift (can also be approximated by $A_{\text{proj}}$)
    \item $\hat{n}$ : Unit vector in the direction of lift (perpendicular to relative wind)
    \item $V$ : Volume of the sheet
    \item $\hat{z}$ : Unit vector in the upward vertical direction
\end{itemize}

\section{Code Explanation and Methodology}

\subsection{Numerical Integration}
The simulation uses Euler's method for time integration. For a small time step \(\Delta t\), the state updates are:
\[
\mathbf{v}(t+\Delta t) = \mathbf{v}(t) + \mathbf{a}(t)\Delta t,
\]
\[
\mathbf{p}(t+\Delta t) = \mathbf{p}(t) + \mathbf{v}(t+\Delta t)\Delta t.
\]
Similarly, the angular quantities are updated. Although \texttt{ode45} is available in MATLAB, Euler’s method is used here for simplicity.
\subsection{Rotation Matrix}

To transform vectors from the body-fixed (local) coordinate frame to the inertial (global) frame, we use a rotation matrix constructed from Euler angles — yaw ($\psi$), pitch ($\theta$), and roll ($\phi$).

The rotation matrix $\mathbf{R}$ is orthogonal ($\mathbf{R}^T = \mathbf{R}^{-1}$) with determinant 1, ensuring preservation of angles and vector magnitudes.

Let the Euler angles be:
\begin{itemize}
    \item $\phi$: Roll (rotation about X-axis)
    \item $\theta$: Pitch (rotation about Y-axis)
    \item $\psi$: Yaw (rotation about Z-axis)
\end{itemize}

The corresponding rotation matrices for each axis are:

\[
R_x(\phi) = 
\begin{bmatrix}
1 & 0 & 0 \\
0 & \cos\phi & -\sin\phi \\
0 & \sin\phi & \cos\phi
\end{bmatrix}, \quad
R_y(\theta) = 
\begin{bmatrix}
\cos\theta & 0 & \sin\theta \\
0 & 1 & 0 \\
-\sin\theta & 0 & \cos\theta
\end{bmatrix}, \quad
R_z(\psi) = 
\begin{bmatrix}
\cos\psi & -\sin\psi & 0 \\
\sin\psi & \cos\psi & 0 \\
0 & 0 & 1
\end{bmatrix}
\]

The composite rotation matrix is:

\[
\mathbf{R} = R_z(\psi) \cdot R_y(\theta) \cdot R_x(\phi)
\]

This matrix transforms local direction vectors into the global frame. It is essential for computing orientation-dependent aerodynamic quantities such as projected area, drag, and lift.
\newpage
The rotation matrix \( R \) converts Euler angles to a transformation matrix using the ZYX convention:
\[
R =
\begin{bmatrix}
\cos\theta\cos\psi - \sin\phi\sin\theta\sin\psi & -\cos\phi\sin\psi & \sin\theta\cos\psi + \sin\phi\cos\theta\sin\psi \\
\cos\theta\sin\psi + \sin\phi\sin\theta\cos\psi & \cos\phi\cos\psi & \sin\theta\sin\psi - \sin\phi\cos\theta\cos\psi \\
-\cos\phi\sin\theta & \sin\phi & \cos\phi\cos\theta
\end{bmatrix}.
\]
This matrix is used to update the sheet's orientation and transform its local corner coordinates to world coordinates for visualization.


% ---------------- PSEUDOCODE ON SEPARATE PAGE ----------------

\subsection{Code Structure and Pseudocode}

%Below is a high-level pseudocode summarizing the simulation procedure:

\begin{lstlisting}[language=Pseudo, caption=Pseudocode for Simulation]
Initialize simulation parameters:
    - Define sheet properties: width, height, thickness, mass, etc.
    - Set aerodynamic coefficients (C_d, C_l), air density, and gravity.
    - Initialize position, velocity, Euler angles, and angular velocity.
    - Compute moment of inertia I for a thin rectangular sheet.

Setup visualization:
    - Create 3D subplots for the overall trajectory and a close-up view.
    - Initialize patch objects to represent the sheet.
    - Initialize a quiver object to display the velocity vector.

For each time step:
    - Compute rotation matrix R from current Euler angles.
    - Calculate relative velocity: v_rel = velocity - wind_velocity.
    - Compute projected area A_proj using the sheet's normal and v_rel.
    - Compute forces:
          Drag:   F_d = -0.5 * rho_air * C_d * A_proj * |v_rel| * v_rel
          Lift:   F_l = 0.5 * rho_air * C_l * A_proj * |v_rel|^2 * unit_vector(lift)
          Buoyancy and Gravity forces.
    - Sum forces to obtain net acceleration: a = F_net / mass.
    - Compute torque due to lift: tau = r_lift x F_l.
    - Compute angular acceleration: alpha = I^{-1}*(tau - omega x (I*omega)).
    - Update translational and rotational states using Euler integration.
    - Log simulation data.
    - Update visualizations (patch objects, trajectory line, velocity arrow).

End loop.

Post-process data:
    - Generate time-series graphs (position, velocity, Euler angles, etc.).
\end{lstlisting}
\newpage
\section{MATLAB Implementation Overview}

The MATLAB code integrates the above methodology to simulate the falling sheet dynamics with both translational and rotational components. Key tools and techniques implemented in the code are described below.

\subsection*{Patch and Quiver Objects}
The code uses \texttt{patch} objects to render the sheet as a polygon in 3D space. This visualization is updated continuously to show the sheet's orientation as it falls. In addition, the \texttt{quiver3} function is used to display a velocity vector (drawn as a black arrow) that indicates the magnitude and direction of the sheet's instantaneous velocity. Together, these visual tools help the user understand both the position and the orientation of the sheet during the simulation.

\subsection*{Euler Integration and ode45}
A simple, first-order Euler integration scheme is applied to update the state of the sheet (position, velocity, Euler angles, and angular velocities) in discrete time steps:
\[
\texttt{state}(t + \Delta t) = \texttt{state}(t) + \frac{d\,\texttt{state}}{dt} \Delta t.
\]
This method, while straightforward, provides insights into the step-by-step evolution of the system.

\medskip
\noindent Although Euler integration is used here for clarity, the code comments note that MATLAB's \texttt{ode45} solver can serve as a more accurate alternative. With \texttt{ode45}, adaptive time-stepping and enhanced numerical stability can be achieved. For example, one could define an ODE function for the entire state vector and integrate it as follows:
\begin{verbatim}
[t, y] = ode45(@(t, y) dynamics(t, y), [0 T], y0);
\end{verbatim}
where \texttt{dynamics} computes the derivatives of the state variables, and \texttt{y0} contains the initial conditions.

\subsection*{Custom Rotation Matrix Function}
To handle the orientation changes, a custom function (\texttt{eul2rotm}) converts Euler angles (yaw, pitch, roll) into a 3D rotation matrix using the ZYX convention. This matrix is then applied to transform vectors from the body-fixed (local) frame to the global (inertial) frame. Such transformation is essential for:
\begin{itemize}
    \item Updating the sheet's orientation in the visualization.
    \item Correctly computing aerodynamic forces, which depend on the sheet's projected area and direction relative to the wind.
\end{itemize}

\subsection*{Additional Implementation Details}
The overall structure of the MATLAB code is organized as follows:
\begin{enumerate}
    \item \textbf{Initialization:}  
    The simulation begins by defining the sheet parameters (dimensions, mass, and aerodynamic coefficients), the environmental settings (air density, gravitational constant, and wind velocity), and the inertia tensor for a thin rectangular sheet. Initial conditions for the sheet’s position, velocity, Euler angles, and angular velocity are also set.
    
    \item \textbf{Visualization Setup:}  
    Two 3D subplots are created:
    \begin{itemize}
        \item An \textbf{Overall Trajectory View} where the sheet's path is traced.
        \item A \textbf{3D Close-Up View} that displays the sheet's instantaneous orientation along with a velocity arrow.
    \end{itemize}
    
    \item \textbf{Simulation Loop:}  
    For each time step:
    \begin{itemize}
        \item The \texttt{eul2rotm} function converts the current Euler angles into a rotation matrix.
        \item The relative velocity is computed by subtracting the wind velocity from the sheet's velocity.
        \item Aerodynamic forces are calculated:
            \begin{itemize}
                \item \textbf{Drag Force (} \(F_D = -0.5\, \rho\, C_d\, A_{\text{proj}}\, |\vec{v}|\, \vec{v}\) \textbf{)}
                \item \textbf{Lift Force (} \(F_L = 0.5\, \rho\, C_l\, A_{\text{proj}}\, |\vec{v}|^2\, \hat{n}\) \textbf{)}
                \item \textbf{Buoyancy and Gravity Forces} are also computed.
            \end{itemize}
        \item The net force is calculated as:
        \[
            F_{\text{net}} = F_G - F_D + F_L + F_B,
        \]
        which is then used to update the linear motion using Euler integration.
        \item The code computes the torque generated by the lift force about a small offset from the center and uses it (with the inertia tensor) to update the angular velocity and Euler angles.
        \item Finally, the visualization objects (\texttt{patch} and \texttt{quiver3}) are updated to reflect the new state.
    \end{itemize}
    
    \item \textbf{Post-Simulation Analysis:}  
    The simulation logs key data (e.g., time, position, velocity, Euler angles, angular velocity, projected area, kinetic energy) for further analysis, and subsequently, several graphs are generated to illustrate the system dynamics.
\end{enumerate}

This combination of visualization, numerical integration, and a modular approach to computing forces and rotations ensures that the simulation is both robust and informative, providing clear insights into the dynamic behavior of the falling sheet.


\section{Results and Discussion}

\subsection*{Example: Initial Parameters}

\begin{lstlisting}[language=Matlab, caption={MATLAB Code for Initial Simulation Parameters}]
% Sheet Parameters
width = 0.2;       % x-dimension (m)
height = 0.15;     % y-dimension (m)
thickness = 0.001; % z-dimension (m) (thin sheet)
mass = 0.01;       % (kg)
rho_air = 1.225;   % air density (kg/m^3)
g = 9.81;          % gravitational acceleration (m/s^2)
Cd = 1.2;          % drag coefficient
Cl = 0.8;          % lift coefficient
wind_velocity = [1.5; 0; 0];  % Wind in x-direction (m/s)

% Inertia tensor (for a thin rectangular sheet)
I = diag([(1/12)*mass*(height^2 + thickness^2), ...
          (1/12)*mass*(width^2 + thickness^2), ...
          (1/12)*mass*(width^2 + height^2)]);

% Initial Conditions
pos = [0; 0; 1.5];
vel = [0; 0; 0];
eul = deg2rad([20; 10; 0]);  % Euler angles [yaw; pitch; roll]
omega = [2; 2; 2];

% Simulation Settings
dt = 0.01;
T = 5;
N = floor(T/dt);
\end{lstlisting}

\subsection*{Source Links}

\noindent
\href{https://drive.google.com/file/d/1vzIcBk4iMInSkBwa29zoJhYEqewebG7Q/view?usp=sharing}{\textbf{Watch the simulation video here.}}
\newline
\href{https://github.com/krunalbaraskar/fall_sheet}{\textbf{See the source code here.}}
\newpage
\section{Simulation Graphs}

\begin{figure}[h!]
    \centering
    \includegraphics[width=1.0\linewidth]{G1.jpg}
    \caption{Physical Quantities Vs Time.}
\end{figure}

\begin{figure}[h!]
    \centering
    \includegraphics[width=1.0\linewidth]{G2.jpg}
    \caption{Drag and Lift Force Vs Time.}
\end{figure}


\begin{figure}[h!]
    \centering
    \includegraphics[width=1.0\linewidth]{G3.jpg}
    \caption{Reynolds number vs time.}
\end{figure}

\begin{figure}[h!]
    \centering
    \includegraphics[width=1.0\linewidth]{G4.png}
    
\end{figure}

\begin{figure}[h!]
    \centering
    \includegraphics[width=1.0\linewidth]{G5.png}
    \caption{Data plot with respect to time.} 
    \small\text{(All the quantities are in their SI units.)}
\end{figure}

\clearpage

\section{Conclusion}

\begin{itemize}
    \item \textbf{Simulation Scheme:}
    \begin{itemize}
        \item The simulation models a thin plastic sheet falling under gravity, with air drag and lift forces, using both translational and rotational dynamics.
        \item Euler integration is used to update position, velocity, orientation (Euler angles), and angular velocity at each time step.
    \end{itemize}

    \item \textbf{General Physics:}
    \begin{itemize}
        \item The sheet does not fall straight down; it follows a complex, non-linear path due to aerodynamic effects.
        \item Drag slows the vertical fall, while lift and initial orientation cause significant horizontal displacement and tumbling.
        \item The Reynolds number increases as the sheet accelerates, indicating a transition to turbulent flow.
    \end{itemize}

    \item \textbf{Result Analysis:}
    \begin{itemize}
        \item Key variables such as position, velocity, orientation, angular velocity, projected area, kinetic energy, drag, and lift are tracked and plotted.
        \item The data shows how the sheet’s position, speed, and orientation evolve over time, confirming the strong influence of aerodynamic forces.
        \item The simulation results match physical expectations: the sheet accelerates downward, develops horizontal motion, and exhibits rotational/tumbling behavior.
    \end{itemize}

    \item \textbf{Summary:}
    \begin{itemize}
        \item This approach provides a realistic and visual understanding of how thin objects behave when falling through air, highlighting the importance of both aerodynamic forces and rotational dynamics.
    \end{itemize}
\end{itemize}

\section{References}
\begin{enumerate}[label=\arabic*.]
    \item Anderson, J. D. (2010). \textit{Fundamentals of Aerodynamics}. McGraw-Hill.
    \item Hibbeler, R. C. (2017). \textit{Engineering Mechanics: Dynamics}. Pearson.
    \item MATLAB Documentation. (2023). \textit{MATLAB and Simulink Documentation}.
    \item Code generation support provided by \textit{ChatGPT} (OpenAI), used for algorithm development and MATLAB scripting.

    
\end{enumerate}

\end{document}
